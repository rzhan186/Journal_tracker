# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: PubMed Subscription Scheduler

on:
  schedule:
    - cron: '0 9 * * *'
  workflow_dispatch:

# ✅ ADD: Required permissions for GitHub API access
permissions:
  contents: read
  issues: write
  actions: read

env:
  PYTHON_VERSION: '3.13'
  LOG_LEVEL: 'INFO'

jobs:
  send-subscription-updates:  
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create logs directory
      run: |
        mkdir -p logs
        echo "Scheduler started at $(date)" > logs/scheduler.log
    
    - name: Validate environment
      run: |
        echo "🔍 Validating environment..."
        python -c "
        import os
        required_vars = [
            'SUPABASE_URL', 'SUPABASE_KEY', 
            'BREVO_API_KEY', 'BREVO_SENDER_EMAIL', 'BREVO_SENDER_NAME',
            'DOWNLOAD_SECRET', 'UNSUBSCRIBE_SECRET'
        ]
        missing = [var for var in required_vars if not os.getenv(var)]
        if missing:
            print(f'❌ Missing environment variables: {missing}')
            exit(1)
        else:
            print('✅ All environment variables present')
        "
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        BREVO_API_KEY: ${{ secrets.BREVO_API_KEY }}
        BREVO_SENDER_EMAIL: ${{ secrets.BREVO_SENDER_EMAIL }}
        BREVO_SENDER_NAME: ${{ secrets.BREVO_SENDER_NAME }}
        DOWNLOAD_SECRET: ${{ secrets.DOWNLOAD_SECRET }}
        UNSUBSCRIBE_SECRET: ${{ secrets.UNSUBSCRIBE_SECRET }}
    
    - name: Run subscription scheduler
      id: scheduler
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        BREVO_API_KEY: ${{ secrets.BREVO_API_KEY }}
        BREVO_SENDER_EMAIL: ${{ secrets.BREVO_SENDER_EMAIL }}
        BREVO_SENDER_NAME: ${{ secrets.BREVO_SENDER_NAME }}
        DOWNLOAD_SECRET: ${{ secrets.DOWNLOAD_SECRET }}
        UNSUBSCRIBE_SECRET: ${{ secrets.UNSUBSCRIBE_SECRET }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      run: |
        echo "🚀 Starting PubMed Subscription Scheduler..."
        echo "📅 Run Date: $(date)"
        echo "🔗 Run URL: $GITHUB_RUN_URL"
        echo "=========================="
        
        cd src
        python scheduler.py 2>&1 | tee ../logs/scheduler.log
        
        # Capture exit code
        exit_code=${PIPESTATUS[0]}
        echo "scheduler_exit_code=$exit_code" >> $GITHUB_OUTPUT
        
        if [ $exit_code -eq 0 ]; then
          echo "✅ Scheduler completed successfully"
        else
          echo "❌ Scheduler failed with exit code: $exit_code"
        fi
        
        exit $exit_code
    
    # ✅ FIXED: Better output handling
    - name: Generate run summary
      id: summary
      if: always()
      run: |
        echo "📊 SCHEDULER RUN SUMMARY" >> logs/summary.txt
        echo "========================" >> logs/summary.txt
        echo "📅 Date: $(date)" >> logs/summary.txt
        echo "🔗 Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> logs/summary.txt
        echo "🏷️  Commit: ${{ github.sha }}" >> logs/summary.txt
        echo "" >> logs/summary.txt
        
        # Initialize default values
        total_subs="0"
        processed="0"
        sent="0"
        errors="0"
        
        if [ -f logs/scheduler.log ]; then
          # Extract key metrics from logs with better error handling
          total_subs=$(grep -o "Found [0-9]* active subscriptions" logs/scheduler.log | grep -o "[0-9]*" | head -1 || echo "0")
          
          # Extract processed and sent numbers more carefully
          if grep -q "Processing complete:" logs/scheduler.log; then
            processed=$(grep "Processing complete:" logs/scheduler.log | grep -o "[0-9]* processed" | grep -o "[0-9]*" | head -1 || echo "0")
            sent=$(grep "Processing complete:" logs/scheduler.log | grep -o "[0-9]* emails sent" | grep -o "[0-9]*" | head -1 || echo "0")
          fi
          
          errors=$(grep -c "❌\|ERROR" logs/scheduler.log || echo "0")
          
          echo "📈 RESULTS:" >> logs/summary.txt
          echo "  • Total Subscriptions: $total_subs" >> logs/summary.txt
          echo "  • Processed: $processed" >> logs/summary.txt
          echo "  • Emails Sent: $sent" >> logs/summary.txt
          echo "  • Errors: $errors" >> logs/summary.txt
          echo "" >> logs/summary.txt
          
          # ✅ FIXED: Proper output format
          {
            echo "total_subscriptions=$total_subs"
            echo "emails_sent=$sent"
            echo "errors_count=$errors"
            echo "processed_count=$processed"
          } >> $GITHUB_OUTPUT
          
          # Show recent email sends
          echo "📧 RECENT EMAILS SENT:" >> logs/summary.txt
          grep "✅.*email sent to" logs/scheduler.log | tail -10 >> logs/summary.txt || echo "  No emails found in logs" >> logs/summary.txt
          
          # Show any errors
          if [ "$errors" -gt 0 ]; then
            echo "" >> logs/summary.txt
            echo "❌ ERRORS:" >> logs/summary.txt
            grep "❌\|ERROR" logs/scheduler.log | tail -5 >> logs/summary.txt
          fi
        else
          echo "❌ No log file found" >> logs/summary.txt
          {
            echo "total_subscriptions=0"
            echo "emails_sent=0"
            echo "errors_count=1"
            echo "processed_count=0"
          } >> $GITHUB_OUTPUT
        fi
        
        # Display summary
        cat logs/summary.txt
    
    - name: Upload scheduler logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: scheduler-logs-${{ github.run_id }}
        path: |
          logs/
          src/*.log
        retention-days: 30
        compression-level: 6
    
    # ✅ FIXED: Better error handling for issue creation
    - name: Create issue on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          let summary = 'Log file not found';
          
          try {
            if (fs.existsSync('logs/summary.txt')) {
              summary = fs.readFileSync('logs/summary.txt', 'utf8');
            }
          } catch (error) {
            console.log('Could not read summary file:', error.message);
            summary = `Error reading summary: ${error.message}`;
          }
          
          const issueBody = `## 🚨 Scheduler Failure Alert
          
          **Run Details:**
          - 📅 Date: ${new Date().toISOString()}
          - 🔗 Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - 🏷️ Commit: ${{ github.sha }}
          - 👤 Actor: ${{ github.actor }}
          
          **Summary:**
          \`\`\`
          ${summary}
          \`\`\`
          
          **Next Steps:**
          1. Check the [workflow logs](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})
          2. Download the log artifacts for detailed analysis
          3. Fix any issues and manually trigger the workflow if needed
          
          **Auto-generated by GitHub Actions**`;
          
          try {
            // Check if issue already exists for today
            const today = new Date().toISOString().split('T')[0];
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'scheduler-failure',
              state: 'open'
            });
            
            const todayIssue = existingIssues.data.find(issue => 
              issue.title.includes(today)
            );
            
            if (!todayIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Scheduler Failed - ${today}`,
                body: issueBody,
                labels: ['scheduler-failure', 'bug', 'urgent']
              });
              console.log('✅ Created failure issue');
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: todayIssue.number,
                body: `## Additional Failure\n\n${issueBody}`
              });
              console.log('✅ Updated existing failure issue');
            }
          } catch (error) {
            console.log('❌ Failed to create/update issue:', error.message);
            // Don't fail the workflow if issue creation fails
          }
    
    - name: Log success metrics
      if: success()
      run: |
        echo "✅ Scheduler completed successfully!"
        echo "📊 Emails sent: ${{ steps.summary.outputs.emails_sent || '0' }}"
        echo "📈 Processed: ${{ steps.summary.outputs.processed_count || '0' }}"
        echo "📊 Check the summary above for detailed metrics"

  # ✅ SIMPLIFIED: Health check job
  health-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: send-subscription-updates
    steps:
    - name: Daily health summary
      run: |
        echo "📋 DAILY HEALTH CHECK"
        echo "===================="
        echo "📅 Date: $(date)"
        echo "✅ Scheduler Status: ${{ needs.send-subscription-updates.result }}"
        echo "📧 Emails Sent: ${{ needs.send-subscription-updates.outputs.emails_sent || 'Unknown' }}"
        echo "❌ Errors: ${{ needs.send-subscription-updates.outputs.errors_count || 'Unknown' }}"
        echo ""
        
        if [ "${{ needs.send-subscription-updates.result }}" = "success" ]; then
          echo "🎉 All systems operational!"
        else
          echo "⚠️ Issues detected - check the logs"
        fi