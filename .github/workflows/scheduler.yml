# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: PubMed Subscription Scheduler

on:
  schedule:
    - cron: '0 9 * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write

env:
  PYTHON_VERSION: '3.13'

jobs:
  send-subscription-updates:  
    runs-on: ubuntu-latest
    
    # Job-level environment variables
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      BREVO_API_KEY: ${{ secrets.BREVO_API_KEY }}
      BREVO_SENDER_EMAIL: ${{ secrets.BREVO_SENDER_EMAIL }}
      BREVO_SENDER_NAME: ${{ secrets.BREVO_SENDER_NAME }}
      DOWNLOAD_SECRET: ${{ secrets.DOWNLOAD_SECRET }}
      UNSUBSCRIBE_SECRET: ${{ secrets.UNSUBSCRIBE_SECRET }}
    
    outputs:
      emails_sent: ${{ steps.run_scheduler.outputs.emails_sent }}
      total_subscriptions: ${{ steps.run_scheduler.outputs.total_subscriptions }}
      errors_count: ${{ steps.run_scheduler.outputs.errors_count }}
      success: ${{ steps.run_scheduler.outputs.success }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run subscription scheduler
      id: run_scheduler
      run: |
        echo "🚀 Starting PubMed Subscription Scheduler at $(date)"
        echo "🔗 Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        mkdir -p logs
        cd src
        
        # Run scheduler and capture output
        if python scheduler.py 2>&1 | tee ../logs/scheduler.log; then
          echo "✅ Scheduler completed successfully"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Scheduler failed"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Parse results from summary file (if your Python script creates one)
        cd ..
        if [ -f logs/summary.json ]; then
          # Parse JSON summary
          emails_sent=$(jq -r '.emails_sent // 0' logs/summary.json)
          total_subs=$(jq -r '.total_subscriptions // 0' logs/summary.json)
          errors=$(jq -r '.errors // 0' logs/summary.json)
        else
          # Fallback to log parsing (simplified)
          emails_sent=$(grep -c "✅.*email sent" logs/scheduler.log || echo "0")
          total_subs=$(grep -o "Found [0-9]*" logs/scheduler.log | head -1 || echo "0")
          errors=$(grep -c "❌\|ERROR" logs/scheduler.log || echo "0")
        fi
        
        echo "emails_sent=$emails_sent" >> $GITHUB_OUTPUT
        echo "total_subscriptions=$total_subs" >> $GITHUB_OUTPUT
        echo "errors_count=$errors" >> $GITHUB_OUTPUT
        
        echo "📊 Results: $total_subs subscriptions, $emails_sent emails sent, $errors errors"
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: scheduler-logs-${{ github.run_id }}
        path: logs/
        retention-days: 7
    
    - name: Create failure issue
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const today = new Date().toISOString().split('T')[0];
          const runUrl = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
          
          // Check for existing issue today
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'scheduler-failure',
            state: 'open'
          });
          
          const existingIssue = issues.find(issue => issue.title.includes(today));
          
          const issueBody = `## 🚨 Scheduler Failure
          
          - **Date:** ${today}
          - **Run:** ${runUrl}
          - **Commit:** ${{ github.sha }}
          
          Check the [workflow logs](${runUrl}) and downloaded artifacts for details.`;
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Scheduler Failed - ${today}`,
              body: issueBody,
              labels: ['scheduler-failure', 'bug']
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `## Additional Failure at ${new Date().toISOString()}\n\n${issueBody}`
            });
          }

  # Simple health check
  health-check:
    runs-on: ubuntu-latest
    needs: send-subscription-updates
    if: always() && github.event_name == 'schedule'
    steps:
    - name: Report status
      run: |
        echo "📋 Daily Health Summary - $(date)"
        echo "================================"
        echo "Status: ${{ needs.send-subscription-updates.result }}"
        echo "Emails sent: ${{ needs.send-subscription-updates.outputs.emails_sent }}"
        echo "Total subscriptions: ${{ needs.send-subscription-updates.outputs.total_subscriptions }}"
        echo "Errors: ${{ needs.send-subscription-updates.outputs.errors_count }}"
        
        if [ "${{ needs.send-subscription-updates.result }}" = "success" ]; then
          echo "🎉 System healthy!"
        else
          echo "⚠️  Issues detected"
        fi