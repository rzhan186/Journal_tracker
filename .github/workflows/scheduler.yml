# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: PubMed Subscription Scheduler

on:
  schedule:
    - cron: '0 9 * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  send-subscription-updates:  
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run subscription scheduler
      id: scheduler
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        BREVO_API_KEY: ${{ secrets.BREVO_API_KEY }}
        BREVO_SENDER_EMAIL: ${{ secrets.BREVO_SENDER_EMAIL }}
        BREVO_SENDER_NAME: ${{ secrets.BREVO_SENDER_NAME }}
        DOWNLOAD_SECRET: ${{ secrets.DOWNLOAD_SECRET }}
        UNSUBSCRIBE_SECRET: ${{ secrets.UNSUBSCRIBE_SECRET }}
      run: |
        echo "🚀 Starting scheduler at $(date)"
        cd src
        
        # Run scheduler and capture both output and exit code
        set +e  # Don't exit on error
        python scheduler.py 2>&1 | tee ../scheduler.log
        exit_code=$?
        set -e  # Re-enable exit on error
        
        echo "Exit code: $exit_code"
        
        if [ $exit_code -eq 0 ]; then
          echo "✅ Scheduler completed successfully"
        else
          echo "❌ Scheduler failed with exit code: $exit_code"
          exit $exit_code
        fi
    
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: scheduler-logs-${{ github.run_id }}
        path: scheduler.log
        retention-days: 7
    
    - name: Create issue on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const today = new Date().toISOString().split('T')[0];
          const runUrl = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
          
          try {
            // Check for existing issue today
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'scheduler-failure',
              state: 'open'
            });
            
            const existingIssue = issues.find(issue => issue.title.includes(today));
            
            const issueBody = `## 🚨 Scheduler Failure Alert
            
            **Details:**
            - 📅 Date: ${today}
            - 🔗 Run: ${runUrl}
            - 🏷️ Commit: ${{ github.sha }}
            - 👤 Triggered by: ${{ github.actor }}
            
            **Next Steps:**
            1. Check the [workflow logs](${runUrl})
            2. Download log artifacts if available
            3. Fix issues and re-run manually if needed
            
            *Auto-generated by GitHub Actions*`;
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Scheduler Failed - ${today}`,
                body: issueBody,
                labels: ['scheduler-failure', 'bug']
              });
              console.log('✅ Created failure issue');
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `## Additional Failure\n\n${issueBody}`
              });
              console.log('✅ Updated existing issue');
            }
          } catch (error) {
            console.log('❌ Failed to create issue:', error.message);
          }

  # Optional: Add a simple success notification
  notify-success:
    runs-on: ubuntu-latest
    needs: send-subscription-updates
    if: success() && github.event_name == 'schedule'
    steps:
    - name: Log success
      run: |
        echo "✅ Daily scheduler completed successfully at $(date)"
        echo "🔗 Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"